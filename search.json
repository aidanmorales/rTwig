[{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://aidanmorales.github.io/rTwig/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://aidanmorales.github.io/rTwig/articles/Box-Dimension.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Box-Dimension","text":"Box dimension measure structural complexity object. grounded theoretical fractal analysis applied three-dimensional point cloud data. method uses box counting (appropriately voxel counting), relationship total number boxes needed contain point cloud box size structural complexity point cloud. Box dimension slope simple linear equation log number boxes, log inverse box size. larger R-squared value indicates self similarity point cloud. Box dimension ranges 1 (line) 3 (solid cube). box dimension 2.72 special object known Menger sponge, zero volume infinite surface area. individual trees box dimension 1 2.2. Box dimension sensitive resolution level occlusion point cloud. low resolution can lead oversimplification, much occlusion can lead boxes used contain cloud box size decreases. good quality point cloud low occlusion resolution 0-1 cm optimal calculating box dimension.","code":""},{"path":"https://aidanmorales.github.io/rTwig/articles/Box-Dimension.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Box-Dimension","text":"can install package directly CRAN: latest development version GitHub:","code":"install.packages(\"rTwig\") #> Warning in rgl.init(initValue, onlyNULL): RGL: unable to open X11 display #> Warning: 'rgl.init' failed, running with 'rgl.useNULL = TRUE'. devtools::install_github(\"https://github.com/aidanmorales/rTwig\")"},{"path":"https://aidanmorales.github.io/rTwig/articles/Box-Dimension.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load Packages","title":"Box-Dimension","text":"first step load rTwig package.","code":"library(rTwig)"},{"path":"https://aidanmorales.github.io/rTwig/articles/Box-Dimension.html","id":"load-point-cloud","dir":"Articles","previous_headings":"","what":"Load Point Cloud","title":"Box-Dimension","text":"Now need load point cloud. Box dimension can run point cloud, single trees, entire forest stands. Let’s use example Kentucky coffee tree.","code":"file <- system.file(\"extdata/cloud.txt\", package = \"rTwig\") cloud <- read.table(file, header = FALSE)"},{"path":"https://aidanmorales.github.io/rTwig/articles/Box-Dimension.html","id":"box-dimension","dir":"Articles","previous_headings":"","what":"Box Dimension","title":"Box-Dimension","text":"Now can calculate box dimension point cloud box_dimension function. need specify location x, y, z coordinates, defaults first three columns point cloud data frame. can also set lower cutoff, smallest box size. Since point cloud resolution 5 mm, set lowercutoff parameter 0.005 m. Let’s take look summary data extract box dimension (slope).","code":"# Box Dimension Summary output <- box_dimension(cloud, lowercutoff = 0.005) output #> [[1]] #> # A tidytable: 10 × 2 #>    log.box.size log.voxels #>           <dbl>      <dbl> #>  1        0           1.39 #>  2        0.693       1.95 #>  3        1.39        2.89 #>  4        2.08        4.16 #>  5        2.77        5.21 #>  6        3.47        6.20 #>  7        4.16        7.25 #>  8        4.85        8.40 #>  9        5.55        9.60 #> 10        6.24       10.7  #>  #> [[2]] #> # A tidytable: 1 × 4 #>   intercept slope r.squared adj.r.squared #>       <dbl> <dbl>     <dbl>         <dbl> #> 1     0.998  1.53     0.997         0.997  # Box Dimension (slope) output[[2]]$slope #> [1] 1.530744"},{"path":"https://aidanmorales.github.io/rTwig/articles/Box-Dimension.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Box-Dimension","text":"can also plot results 2D 3D plots, setting plot parameter 2D, 3D . plot parameter set FALSE default speed calculations.","code":"# 2D Plot output <- box_dimension(cloud, lowercutoff = 0.005, plot = \"2D\") # 3D Plot output <- box_dimension(cloud, lowercutoff = 0.005, plot = \"3D\")"},{"path":"https://aidanmorales.github.io/rTwig/articles/SimpleForest.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"SimpleForest","text":"Real Twig designed tested using QSMs created TreeQSM modeling software. However, QSM provides parent-child cylinder relationships, Real Twig work, case SimpleForest software. high quality point clouds, QSMs proper input settings, species specific twig diameter measurements supplied, can expect get good estimates tree volume. Real Twig can provide excellent tree volume estimates, can transform poor quality data good data. general rule thumb, closer QSM resembles actual tree correction, better results correction. Real Twig performs best topology tree mostly correct, cylinder sizes main sources QSM error. Errors QSM topology become readily apparent correction, Real Twig can also used visually validate QSM topology without reference data.","code":""},{"path":"https://aidanmorales.github.io/rTwig/articles/SimpleForest.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"SimpleForest","text":"can install package directly CRAN: latest development version GitHub:","code":"install.packages(\"rTwig\") devtools::install_github(\"https://github.com/aidanmorales/rTwig\")"},{"path":"https://aidanmorales.github.io/rTwig/articles/SimpleForest.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load Packages","title":"SimpleForest","text":"first step load rTwig package. Real Twig works well paired packages Tidyverse, also load dplyr package help data manipulation.","code":"# Load rTwig library(rTwig) #> Warning in rgl.init(initValue, onlyNULL): RGL: unable to open X11 display #> Warning: 'rgl.init' failed, running with 'rgl.useNULL = TRUE'.  # Other useful packages library(dplyr)"},{"path":"https://aidanmorales.github.io/rTwig/articles/SimpleForest.html","id":"import-qsm","dir":"Articles","previous_headings":"","what":"Import QSM","title":"SimpleForest","text":"SimpleForest exports QSMs .csv files, easy load R using built read.csv() function. QSM contains thousands cylinders, much faster use fread() function data.table package take advantage multi-threaded support. Let’s take look SimpleForest cylinder data.","code":"# QSM directory file <- system.file(\"extdata/QSM.csv\", package = \"rTwig\")  # Import and save QSM cylinder data cylinder <- read.csv(file) str(cylinder) #> 'data.frame':    1149 obs. of  41 variables: #>  $ type                        : chr  \"cylinder\" \"cylinder\" \"cylinder\" \"cylinder\" ... #>  $ ID                          : int  0 1 2 3 4 5 6 7 8 9 ... #>  $ parentID                    : int  -1 0 1 2 3 4 5 6 7 8 ... #>  $ startX                      : num  0.761 0.759 0.771 0.768 0.765 ... #>  $ startY                      : num  -16.4 -16.4 -16.4 -16.3 -16.4 ... #>  $ startZ                      : num  254 254 254 254 254 ... #>  $ endX                        : num  0.759 0.771 0.768 0.765 0.769 ... #>  $ endY                        : num  -16.4 -16.4 -16.3 -16.4 -16.4 ... #>  $ endZ                        : num  254 254 254 254 254 ... #>  $ radius                      : num  0.0472 0.0479 0.0469 0.0467 0.0453 ... #>  $ volume                      : num  0.000348 0.000382 0.00037 0.000359 0.000341 0.000313 0.000316 0.000306 0.000284 0.000282 ... #>  $ growthVolume                : num  0.0304 0.03 0.0296 0.0293 0.0289 ... #>  $ length                      : num  0.0497 0.0529 0.0535 0.0525 0.0528 ... #>  $ growthLength                : num  31.4 31.4 31.3 31.3 31.2 ... #>  $ vesselVolume                : num  237 233 229 226 222 ... #>  $ distanceToTwig              : num  4.32 4.27 4.22 4.16 4.11 ... #>  $ FittingType                 : chr  \" SPHEREFOLLOWING\" \" SPHEREFOLLOWING\" \" SPHEREFOLLOWING\" \" SPHEREFOLLOWING\" ... #>  $ averagePointDistance        : num  0.00589 0.00378 0.00205 0.00246 0.00251 ... #>  $ maxPointDistance            : num  0.00348 0.00348 0.00348 0.00348 0.00348 ... #>  $ qualityFlag                 : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ segmentID                   : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ parentSegmentID             : int  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 ... #>  $ segmentMedianRadius         : num  0.0414 0.0414 0.0414 0.0414 0.0414 ... #>  $ segmentGrowthVolume         : num  0.026 0.026 0.026 0.026 0.026 ... #>  $ segmentGrowthLength         : num  30.7 30.7 30.7 30.7 30.7 ... #>  $ branchOrder                 : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ reverseBranchOrder          : int  18 18 18 18 18 18 18 18 18 18 ... #>  $ reversePipeRadiusBranchorder: num  8.31 8.31 8.31 8.31 8.31 ... #>  $ reversePipeAreaBranchorder  : int  69 69 69 69 69 69 69 69 69 69 ... #>  $ branchID                    : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ treeID                      : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ treeSpecies                 : chr  \" unknownSpecies\" \" unknownSpecies\" \" unknownSpecies\" \" unknownSpecies\" ... #>  $ translateX                  : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ translateY                  : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ translatez                  : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ gvA                         : num  0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 ... #>  $ gvB                         : num  0.402 0.402 0.402 0.402 0.402 ... #>  $ gvC                         : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ glA                         : num  0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 ... #>  $ glB                         : num  0.402 0.402 0.402 0.402 0.402 ... #>  $ glC                         : num  0 0 0 0 0 0 0 0 0 0 ..."},{"path":"https://aidanmorales.github.io/rTwig/articles/SimpleForest.html","id":"cylinder-data","dir":"Articles","previous_headings":"","what":"Cylinder Data","title":"SimpleForest","text":"Next, update parent-child ordering cylinder data allow path analysis. need first cylinder ID index 0. Let’s update cylinders using update_cylinders() function check make sure parent-child ordering sequential without gaps. Many extra QSM variables ready included SimpleForest QSMs, calculated step missing.","code":"# Update cylinder data cylinder <- update_cylinders(cylinder)  # Check ordering cylinder %>%   select(branchID, parentID, ID) %>%   head() #> # A tidytable: 6 × 3 #>   branchID parentID    ID #>      <int>    <int> <int> #> 1        0       -1     0 #> 2        0        0     1 #> 3        0        1     2 #> 4        0        2     3 #> 5        0        3     4 #> 6        0        4     5"},{"path":"https://aidanmorales.github.io/rTwig/articles/SimpleForest.html","id":"topology","dir":"Articles","previous_headings":"","what":"Topology","title":"SimpleForest","text":"correct QSM, often worthwhile check quality QSM plotting input point cloud. , load point cloud save data frame, first three columns x, y, z columns. plot_qsm() function.","code":"# Load the input point cloud file <- system.file(\"extdata/cloud.txt\", package = \"rTwig\") cloud <- read.table(file, header = FALSE)  # Plot the qsm and point cloud plot_qsm(cylinder = cylinder, cloud = cloud, radius = cylinder$radius)"},{"path":"https://aidanmorales.github.io/rTwig/articles/SimpleForest.html","id":"twig-diameters","dir":"Articles","previous_headings":"","what":"Twig Diameters","title":"SimpleForest","text":"can correct QSM radii, need know real twig diameter . example tree, species Kentucky coffee tree (Gymnocladus dioicus), nice, stout twigs. rTwig comes data base twigs can called typing twigs data set. data set includes average twig radius, min max radius, standard deviation, coefficient variation. Let’s look twig data set find twig diameter Kentucky coffee tree.","code":"# Look at the twigs database twigs #> # A tibble: 96 × 7 #>    scientific.name  radius.mm     n   min   max   std    cv #>    <chr>                <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 Abies concolor        1.43    21  0.89  1.9   0.28  0.19 #>  2 Abies spp.            1.43    21  0.89  1.9   0.28  0.19 #>  3 Acer platanoides      1.39    30  0.89  2.03  0.3   0.21 #>  4 Acer rubrum           1.18    30  0.89  1.52  0.16  0.14 #>  5 Acer saccharinum      1.41    14  0.89  1.9   0.27  0.2  #>  6 Acer saccharum        1.2     30  0.89  1.65  0.23  0.19 #>  7 Acer spp.             1.29   104  0.89  2.03  0.23  0.18 #>  8 Aesculus flava        2.67     8  2.29  2.79  0.2   0.08 #>  9 Aesculus spp.         2.67     8  2.29  2.79  0.2   0.08 #> 10 Betula nigra          0.85    30  0.51  1.52  0.23  0.27 #> # ℹ 86 more rows  # Find our species filter(twigs, scientific.name == \"Gymnocladus dioicus\") #> # A tibble: 1 × 7 #>   scientific.name     radius.mm     n   min   max   std    cv #>   <chr>                   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Gymnocladus dioicus      4.23    30  2.79   6.6  0.87   0.2"},{"path":"https://aidanmorales.github.io/rTwig/articles/SimpleForest.html","id":"summary-metrics","dir":"Articles","previous_headings":"","what":"Summary Metrics","title":"SimpleForest","text":"correct QSM, Let’s take look current metrics, can compare tree volume correction. can qsm_summary() function. can also make plot radius versus growth length see much overestimation twig radii.   Looking diagnostic plot log log scale, measured twig radius horizontal line, can see twig radii overestimated, increasing radii variation growth length approaches zero. clear pattern individual branch tapers.","code":"# QSM summary qsm_summary(cylinder, radius = \"unmodified\") #> [[1]] #> # A tidytable: 5 × 3 #>   BranchOrder Tot.vol.L Tot.sa.m2 #>         <int>     <dbl>     <dbl> #> 1           0   12.9       0.768  #> 2           1    8.70      1.07   #> 3           2    6.46      0.871  #> 4           3    1.82      0.298  #> 5           4    0.0723    0.0148 #>  #> [[2]] #> # A tidytable: 1 × 8 #>   QSM.dbh.cm QSM.ht.m Stem.vol.L Branch.vol.L Tot.vol.L Stem.sa.m2 Branch.sa.m2 #>        <dbl>    <dbl>      <dbl>        <dbl>     <dbl>      <dbl>        <dbl> #> 1       7.39     3.67       12.9         17.1      30.0      0.768         2.26 #> # ℹ 1 more variable: Tot.sa.m2 <dbl>"},{"path":"https://aidanmorales.github.io/rTwig/articles/SimpleForest.html","id":"correct-radii","dir":"Articles","previous_headings":"","what":"Correct Radii","title":"SimpleForest","text":"Now can correct QSM cylinder radii correct_radii() function. step, model path tree separately, poorly fit cylinders identified removed, GAM fit, intercept measured twig radius, growth length predicts cylinder radius. Let’s correct cylinder radii Kentucky coffee tree look new volume estimates diagnostic plots.   can see reduced volume QSM around 8 liters, around 36% overestimation volume correction. Kentucky coffee tree relatively large twigs, overestimation severe tree much smaller twigs, can upwards >200% overestimation cases. Looking diagnostic plot, can see individual branches can clearly identified unique allometry. Notice nearly volume reduction occurred higher order branches, main stem remaining nearly unchanged. branches now taper towards measured twig radius Kentucky coffee tree. Getting real twig diameter critical, high value overestimate volume, low value underestimate total volume, underestimate proportional number twigs small branches tree. species available database, found genus level twig radius average good substitute.","code":"# Correct cylinder radii cylinder <- correct_radii(cylinder, twigRad = 4.23) # Corrected QSM summary qsm_summary(cylinder, radius = \"modified\") #> [[1]] #> # A tidytable: 5 × 3 #>   BranchOrder Tot.vol.L Tot.sa.m2 #>         <int>     <dbl>     <dbl> #> 1           0   12.0      0.722   #> 2           1    5.98     0.855   #> 3           2    3.24     0.572   #> 4           3    0.508    0.156   #> 5           4    0.0155   0.00695 #>  #> [[2]] #> # A tidytable: 1 × 8 #>   QSM.dbh.cm QSM.ht.m Stem.vol.L Branch.vol.L Tot.vol.L Stem.sa.m2 Branch.sa.m2 #>        <dbl>    <dbl>      <dbl>        <dbl>     <dbl>      <dbl>        <dbl> #> 1       7.39     3.67       12.0         9.75      21.7      0.722         1.59 #> # ℹ 1 more variable: Tot.sa.m2 <dbl>"},{"path":"https://aidanmorales.github.io/rTwig/articles/SimpleForest.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"SimpleForest","text":"Optionally, can smooth QSM ensuring cylinders connected. visual change affect volume estimates. can smooth_qsm() function, plot results plot_qsm() function. different colors different branch orders. can also color QSM many different variables palettes. See plot_qsm() documentation details. can also save QSM mesh (.ply extension) use modeling programs export_mesh() function. colors palettes found plot_qsm() function can used color mesh.","code":"# Smooth QSM cylinder <- smooth_qsm(cylinder)  # Plot QSM plot_qsm(cylinder)  # QSM Custom Colors & Piping cylinder %>%   plot_qsm(     radius = .$radius,     cyl_color = .$reverseBranchOrder,     cyl_palette = \"magma\"   )  # Plot Twigs Colored by Unique Segment cylinder %>%   filter(reverseBranchOrder == 1) %>%   plot_qsm(     radius = .$radius,     cyl_color = .$reverseBranchOrder,     cyl_palette = \"rainbow\"   ) # Export Mesh Colored by RBO cylinder %>%   export_mest(     filename = \"QSM_mesh\",     radius = .$radius,     cyl_color = .$reverseBranchOrder,     cyl_palette = \"magma\"   )  # Export Twigs Colored by Unique Segments cylinder %>%   filter(reverseBranchOrder == 1) %>%   export_mesh(     filename = \"QSM_mesh\",     radius = .$radius,     cyl_color = .$reverseBranchOrder,     cyl_palette = \"rainbow\"   )"},{"path":"https://aidanmorales.github.io/rTwig/articles/SimpleForest.html","id":"workflow-best-practices","dir":"Articles","previous_headings":"","what":"Workflow & Best Practices","title":"SimpleForest","text":"overview typical rTwig processing chain. dealing multiple trees, advise creating master data frame tidy format, unique tree row, columns tree id, directory QSM .csv file, species twig diameter, can tailored workflow needs. simple matter looping master data frame, correcting tree, saving results master list. Make sure read function’s documentation examples unique features.","code":"# Import QSM file <- system.file(\"extdata/QSM.csv\", package = \"rTwig\") cylinder <- read.csv(file)  # Real Twig Main Steps cylinder <- update_cylinders(cylinder) cylinder <- correct_radii(cylinder, twigRad = 4.23)  # Summary Metrics qsm_summary(cylinder)  # Plot Results plot_qsm(cylinder, color = \"GrowthLength\")"},{"path":"https://aidanmorales.github.io/rTwig/articles/SimpleForest.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"SimpleForest","text":"know Real Twig returns accurate volume estimates? can validate method high quality reference data set laser scanner destructively sampled. laser scanning done leaf-conditions Riegl VZ-400. destructive sampling contains total branch main stem dry mass, also basic density main stem branches. important note Real Twig tested SimpleForest development. Real Twig improve volume estimates SimpleForest versus built allometric corrections, still improvements made, SimpleForest QSM cylinders generally much overestimated TreeQSM cylinders, making identification “good” cylinders difficult. mass estimates statistics using SimpleForest v5.3.2 built vessel volume correction, Real Twig applied QSMs.","code":"#> Warning: The `scale_name` argument of `continuous_scale()` is deprecated as of ggplot2 #> 3.5.0. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: The `trans` argument of `continuous_scale()` is deprecated as of ggplot2 3.5.0. #> ℹ Please use the `transform` argument instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"TreeQSM","text":"Real Twig designed tested using QSMs created TreeQSM modeling software. high quality point clouds, QSMs proper input settings, species specific twig diameter measurements supplied, can expect get good estimates tree volume within ± 10% real tree volume. Real Twig can provide excellent tree volume estimates, can transform poor quality data good data. general rule thumb, closer QSM resembles actual tree correction, better results correction. Real Twig performs best topology tree mostly correct, cylinder sizes main sources QSM error. Errors QSM topology become readily apparent correction, Real Twig can also used visually validate QSM topology without reference data.","code":""},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"TreeQSM","text":"can install package directly CRAN: latest development version GitHub:","code":"install.packages(\"rTwig\") devtools::install_github(\"https://github.com/aidanmorales/rTwig\")"},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load Packages","title":"TreeQSM","text":"first step load rTwig package. Real Twig works well paired packages Tidyverse, also load dplyr package help data manipulation.","code":"# Load rTwig library(rTwig) #> Warning in rgl.init(initValue, onlyNULL): RGL: unable to open X11 display #> Warning: 'rgl.init' failed, running with 'rgl.useNULL = TRUE'.  # Other useful packages library(dplyr)"},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"import-qsm","dir":"Articles","previous_headings":"","what":"Import QSM","title":"TreeQSM","text":"rTwig supports available versions TreeQSM, v2.0 v2.4.1 time writing. important note legacy versions TreeQSM (v2.0) store data much different format modern versions (v2.3.0-2.4.1). strongly advised use latest version TreeQSM rTwig best QSM topology volume estimates. Older versions can used, QSM topology poor, volume underestimation almost guaranteed. Regardless version TreeQSM MATLAB used, import_qsm() function import QSM (.mat extension) convert data format usable R. user must specify version TreeQSM using version parameter. rTwig automatically defaults use new TreeQSM format, older format can imported version = \"2.0\". import_qsm() also imports QSM information, including cylinder, branch, treedata, rundata, pmdistance, triangulation data, stored together list.","code":""},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"treeqsm-v2-3-0---2-4-1","dir":"Articles","previous_headings":"Import QSM","what":"TreeQSM v2.3.0 - 2.4.1","title":"TreeQSM","text":"can import QSM supplying import_qsm() function directory QSM. QSM list length six. can check follows: Let’s check version TreeQSM used, date QSM made, take look cylinder data.","code":"# QSM directory file <- system.file(\"extdata/QSM.mat\", package = \"rTwig\")  # Import and save QSM qsm <- import_qsm(file) summary(qsm) #>               Length Class      Mode #> cylinder      17     data.frame list #> branch        10     data.frame list #> treedata      91     -none-     list #> rundata       45     data.frame list #> pmdistance    21     -none-     list #> triangulation 12     -none-     list # QSM info qsm$rundata$version #> [1] \"2.4.1\" qsm$rundata$start.date #> [1] \"2023-12-06 10:14:31 UTC\"  # Number of cylinders str(qsm$cylinder) #> 'data.frame':    1136 obs. of  17 variables: #>  $ radius          : num  0.0465 0.0454 0.0442 0.0437 0.0429 ... #>  $ length          : num  0.09392 0.07216 0.06654 0.00938 0.06795 ... #>  $ start.x         : num  0.768 0.768 0.768 0.769 0.769 ... #>  $ start.y         : num  -16.4 -16.4 -16.4 -16.3 -16.3 ... #>  $ start.z         : num  254 254 254 254 254 ... #>  $ axis.x          : num  0.00995 -0.0111 0.01364 0.01571 0.01449 ... #>  $ axis.y          : num  0.0912 0.0391 0.0367 0.0271 0.0267 ... #>  $ axis.z          : num  0.996 0.999 0.999 1 1 ... #>  $ parent          : int  0 1 2 3 4 5 6 7 8 9 ... #>  $ extension       : int  2 3 4 5 6 7 8 9 10 11 ... #>  $ added           : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ UnmodRadius     : num  0.0465 0.0454 0.0442 0.0437 0.0429 ... #>  $ branch          : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ SurfCov         : num  0.875 1 1 1 1 1 1 1 1 1 ... #>  $ mad             : num  0.00072 0.000538 0.000523 0.000335 0.000438 ... #>  $ BranchOrder     : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ PositionInBranch: int  1 2 3 4 5 6 7 8 9 10 ..."},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"treeqsm-v2-0","dir":"Articles","previous_headings":"Import QSM","what":"TreeQSM v2.0","title":"TreeQSM","text":"Let’s try importing old QSM check structure.","code":"# QSM Directory file <- system.file(\"extdata/QSM_2.mat\", package = \"rTwig\")  # Import and save QSM qsm2 <- import_qsm(file, version = \"2.0\")  # QSM Info summary(qsm2) #>          Length Class      Mode #> cylinder 15     data.frame list #> treedata 33     -none-     list str(qsm2$cylinder) #> 'data.frame':    1026 obs. of  15 variables: #>  $ radius          : num  0.0612 0.056 0.0553 0.0552 0.0534 ... #>  $ length          : num  0.335 0.283 0.272 0.244 0.267 ... #>  $ start.x         : num  8.4 8.43 8.44 8.47 8.5 ... #>  $ start.y         : num  47.7 47.7 47.7 47.8 47.8 ... #>  $ start.z         : num  2.23 2.57 2.85 3.12 3.36 ... #>  $ axis.x          : num  0.1103 0.0531 0.0878 0.1666 0.0894 ... #>  $ axis.y          : num  0.0337 0.0296 0.1282 0.0801 0.061 ... #>  $ axis.z          : num  0.993 0.998 0.988 0.983 0.994 ... #>  $ parent          : num  0 1 2 3 4 5 6 7 8 9 ... #>  $ extension       : num  1 2 3 4 5 6 7 8 9 10 ... #>  $ added           : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ UnmodRadius     : num  0.0612 0.056 0.0553 0.0552 0.0534 ... #>  $ branch          : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ BranchOrder     : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ PositionInBranch: num  1 2 3 4 5 6 7 8 9 10 ..."},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"cylinder-data","dir":"Articles","previous_headings":"","what":"Cylinder Data","title":"TreeQSM","text":"Next, update parent-child ordering cylinder data allow path analysis add new QSM variables. important QSM variable growth length. Growth length cumulative length metric, growth length cylinder length, plus lengths children. gives us perfect ordering along branch path, highest growth length equal base tree, twigs growth length equal cylinder length. also important note number twigs QSM always equal number paths QSM, since path goes base tree twig tip. reverse branch order (RBO) another important variable. RBO assigns order 1 twigs, works backwards base main stem, highest RBO. makes problematic twig cylinders easy identify. Let’s save cylinders new variable make easier work , check make sure parent-child ordering sequential without gaps, look new variables.","code":"# Save cylinders to new object cylinder <- qsm$cylinder  # Update cylinder data cylinder <- update_cylinders(cylinder)  # Check ordering cylinder %>%   select(branch, parent, extension, PositionInBranch) %>%   head() #> # A tidytable: 6 × 4 #>   branch parent extension PositionInBranch #>    <int>  <dbl>     <int>            <int> #> 1      1      0         1                1 #> 2      1      1         2                2 #> 3      1      2         3                3 #> 4      1      3         4                4 #> 5      1      4         5                5 #> 6      1      5         6                6  # Check New Variables cylinder %>%   select(reverseBranchOrder, totalChildren, GrowthLength, segment, parentSegment) %>%   head() #> # A tidytable: 6 × 5 #>   reverseBranchOrder totalChildren GrowthLength segment parentSegment #>                <dbl>         <int>        <dbl>   <int>         <int> #> 1                 20             1         32.8       1             0 #> 2                 20             1         32.7       1             0 #> 3                 20             1         32.6       1             0 #> 4                 20             1         32.6       1             0 #> 5                 20             1         32.6       1             0 #> 6                 20             1         32.5       1             0"},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"topology","dir":"Articles","previous_headings":"","what":"Topology","title":"TreeQSM","text":"correct QSM, often worthwhile check quality QSM plotting input point cloud. , load point cloud save data frame, first three columns x, y, z columns. use plot_qsm() function . want check raw cylinder fits TreeQSM modified taper filter, use raw cylinder radii.","code":"# Load the input point cloud file <- system.file(\"extdata/cloud.txt\", package = \"rTwig\") cloud <- read.table(file, header = FALSE)  # Plot the qsm and point cloud plot_qsm(cylinder = cylinder, cloud = cloud, radius = cylinder$UnmodRadius)"},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"twig-diameters","dir":"Articles","previous_headings":"","what":"Twig Diameters","title":"TreeQSM","text":"can correct QSM radii, need know real twig diameter . example tree, species Kentucky coffee tree (Gymnocladus dioicus), nice, stout twigs. rTwig comes data base twigs can called typing twigs data set. data set includes average twig radius, min max radius, standard deviation, coefficient variation. Let’s look twig data set find twig diameter Kentucky coffee tree.","code":"# Look at the twigs database twigs #> # A tibble: 96 × 7 #>    scientific.name  radius.mm     n   min   max   std    cv #>    <chr>                <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 Abies concolor        1.43    21  0.89  1.9   0.28  0.19 #>  2 Abies spp.            1.43    21  0.89  1.9   0.28  0.19 #>  3 Acer platanoides      1.39    30  0.89  2.03  0.3   0.21 #>  4 Acer rubrum           1.18    30  0.89  1.52  0.16  0.14 #>  5 Acer saccharinum      1.41    14  0.89  1.9   0.27  0.2  #>  6 Acer saccharum        1.2     30  0.89  1.65  0.23  0.19 #>  7 Acer spp.             1.29   104  0.89  2.03  0.23  0.18 #>  8 Aesculus flava        2.67     8  2.29  2.79  0.2   0.08 #>  9 Aesculus spp.         2.67     8  2.29  2.79  0.2   0.08 #> 10 Betula nigra          0.85    30  0.51  1.52  0.23  0.27 #> # ℹ 86 more rows  # Find our species filter(twigs, scientific.name == \"Gymnocladus dioicus\") #> # A tibble: 1 × 7 #>   scientific.name     radius.mm     n   min   max   std    cv #>   <chr>                   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Gymnocladus dioicus      4.23    30  2.79   6.6  0.87   0.2"},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"summary-metrics","dir":"Articles","previous_headings":"","what":"Summary Metrics","title":"TreeQSM","text":"correct QSM, Let’s take look current metrics, can compare tree volume correction. can qsm_summary() function. stem triangulation enabled TreeQSM, can use better represent main stem volume cases, especially large butress flares. can also make plot radius versus growth length see much overestimation twig radii.   Looking diagnostic plot log log scale, measured twig radius horizontal line, can see nearly twig radii overestimated, increasing radii variation growth length approaches zero. Except main stem, clear pattern individual branch tapering.","code":"# QSM summary qsm_summary(cylinder, radius = \"unmodified\") #> [[1]] #> # A tidytable: 6 × 3 #>   BranchOrder Tot.vol.L Tot.sa.m2 #>         <int>     <dbl>     <dbl> #> 1           0   10.8      0.644   #> 2           1    5.80     0.827   #> 3           2    3.86     0.732   #> 4           3    1.06     0.237   #> 5           4    0.622    0.0785  #> 6           5    0.0346   0.00693 #>  #> [[2]] #> # A tidytable: 1 × 8 #>   QSM.dbh.cm QSM.ht.m Stem.vol.L Branch.vol.L Tot.vol.L Stem.sa.m2 Branch.sa.m2 #>        <dbl>    <dbl>      <dbl>        <dbl>     <dbl>      <dbl>        <dbl> #> 1       7.18     3.69       10.8         11.4      22.2      0.644         1.88 #> # ℹ 1 more variable: Tot.sa.m2 <dbl>  # QSM summary with Triangulation qsm_summary(cylinder = cylinder, triangulation = qsm$triangulation, radius = \"unmodified\") #> [[1]] #> # A tidytable: 6 × 3 #>   BranchOrder Tot.vol.L Tot.sa.m2 #>         <int>     <dbl>     <dbl> #> 1           0   29.0      0.645   #> 2           1    5.80     0.827   #> 3           2    3.86     0.732   #> 4           3    1.06     0.237   #> 5           4    0.622    0.0785  #> 6           5    0.0346   0.00693 #>  #> [[2]] #> # A tidytable: 1 × 8 #>   QSM.dbh.cm QSM.ht.m Stem.vol.L Branch.vol.L Tot.vol.L Stem.sa.m2 Branch.sa.m2 #>        <dbl>    <dbl>      <dbl>        <dbl>     <dbl>      <dbl>        <dbl> #> 1       7.18     3.69       29.0         11.4      40.4      0.645         1.88 #> # ℹ 1 more variable: Tot.sa.m2 <dbl>"},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"correct-radii","dir":"Articles","previous_headings":"","what":"Correct Radii","title":"TreeQSM","text":"Now can correct QSM cylinder radii correct_radii() function. step, model path tree separately, poorly fit cylinders identified removed, GAM fit, intercept measured twig radius, growth length predicts cylinder radius. Let’s correct cylinder radii Kentucky coffee tree look new volume estimates diagnostic plots.   can see reduced volume QSM around 3 liters, around 15% overestimation volume correction. Kentucky coffee tree relatively large twigs, overestimation severe tree much smaller twigs, can upwards >200% overestimation cases. Looking diagnostic plot, can see individual branches can clearly identified unique allometry. Notice nearly volume reduction occurred higher order branches, main stem remaining nearly unchanged. branches now taper towards measured twig radius Kentucky coffee tree. Getting real twig diameter critical, high value overestimate volume, low value underestimate total volume, underestimate proportional number twigs small branches tree. species available database, found genus level twig radius average good substitute.","code":"# Correct cylinder radii cylinder <- correct_radii(cylinder, twigRad = 4.23) # Corrected QSM summary qsm_summary(cylinder, radius = \"modified\") #> [[1]] #> # A tidytable: 6 × 3 #>   BranchOrder Tot.vol.L Tot.sa.m2 #>         <int>     <dbl>     <dbl> #> 1           0  10.8       0.640   #> 2           1   5.20      0.753   #> 3           2   2.69      0.583   #> 4           3   0.539     0.170   #> 5           4   0.104     0.0431  #> 6           5   0.00683   0.00308 #>  #> [[2]] #> # A tidytable: 1 × 8 #>   QSM.dbh.cm QSM.ht.m Stem.vol.L Branch.vol.L Tot.vol.L Stem.sa.m2 Branch.sa.m2 #>        <dbl>    <dbl>      <dbl>        <dbl>     <dbl>      <dbl>        <dbl> #> 1       7.18     3.69       10.8         8.53      19.3      0.640         1.55 #> # ℹ 1 more variable: Tot.sa.m2 <dbl>"},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"TreeQSM","text":"Optionally, can smooth QSM ensuring cylinders connected. visual change affect volume estimates. can smooth_qsm() function, plot results plot_qsm() function. different colors different branch orders. can also color QSM many different variables palettes. See plot_qsm() documentation details. can also save QSM mesh (.ply extension) use modeling programs export_mesh() function. colors palettes found plot_qsm() function can used color mesh.","code":"# Smooth QSM cylinder <- smooth_qsm(cylinder)  # Plot QSM plot_qsm(cylinder)  # QSM Custom Colors & Piping cylinder %>%   plot_qsm(     radius = .$radius,     cyl_color = .$reverseBranchOrder,     cyl_palette = \"magma\"   )  # Plot Twigs Colored by Unique Segment cylinder %>%   filter(reverseBranchOrder == 1) %>%   plot_qsm(     radius = .$radius,     cyl_color = .$reverseBranchOrder,     cyl_palette = \"rainbow\"   ) # Export Mesh Colored by RBO cylinder %>%   export_mest(     filename = \"QSM_mesh\",     radius = .$radius,     cyl_color = .$reverseBranchOrder,     cyl_palette = \"magma\"   )  # Export Twigs Colored by Unique Segments cylinder %>%   filter(reverseBranchOrder == 1) %>%   export_mesh(     filename = \"QSM_mesh\",     radius = .$radius,     cyl_color = .$reverseBranchOrder,     cyl_palette = \"rainbow\"   )"},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"workflow-best-practices","dir":"Articles","previous_headings":"","what":"Workflow & Best Practices","title":"TreeQSM","text":"overview typical rTwig processing chain. dealing multiple trees, advise creating master data frame tidy format, unique tree row, columns tree id, directory QSM .mat file, species twig diameter, can tailored workflow needs. simple matter looping master data frame, correcting tree, saving results master list. Make sure read function’s documentation examples unique features.","code":"# Import QSM file <- system.file(\"extdata/QSM.mat\", package = \"rTwig\") qsm <- import_qsm(file)  # Real Twig Main Steps cylinder <- qsm$cylinder cylinder <- update_cylinders(cylinder) cylinder <- correct_radii(cylinder, twigRad = 4.23)  # Summary Metrics qsm_summary(cylinder)  # Plot Results plot_qsm(cylinder)"},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"TreeQSM","text":"know Real Twig returns accurate volume estimates? rigorously tested method high quality reference data set laser scanner destructively sampled. laser scanning done leaf-conditions Riegl VZ-400. destructive sampling contains total branch main stem dry mass, also basic density main stem branches. used different versions TreeQSM input parameters per tree test model.","code":""},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"treeqsm-v2-4-1","dir":"Articles","previous_headings":"Validation","what":"TreeQSM v2.4.1","title":"TreeQSM","text":"mass estimates statistics using TreeQSM v2.4.1 built tapering Real Twig applied QSMs.","code":"#> Warning: The `scale_name` argument of `continuous_scale()` is deprecated as of ggplot2 #> 3.5.0. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: The `trans` argument of `continuous_scale()` is deprecated as of ggplot2 3.5.0. #> ℹ Please use the `transform` argument instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://aidanmorales.github.io/rTwig/articles/TreeQSM.html","id":"treeqsm-v2-3-0","dir":"Articles","previous_headings":"Validation","what":"TreeQSM v2.3.0","title":"TreeQSM","text":"mass estimates statistics using TreeQSM v2.3.0 built tapering Real Twig applied QSMs.","code":""},{"path":"https://aidanmorales.github.io/rTwig/articles/Twigs.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Twigs","text":"Twigs smallest ground woody component tree. Twigs responsible supporting delicate tissues needed grow leaves protect buds dormant season. twig measurements basis Real Twig method, publicly available databases twigs limited, present database twig measurements wide range tree genera species.","code":""},{"path":"https://aidanmorales.github.io/rTwig/articles/Twigs.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Twigs","text":"can install package directly CRAN: latest development version GitHub:","code":"install.packages(\"rTwig\") devtools::install_github(\"https://github.com/aidanmorales/rTwig\")"},{"path":"https://aidanmorales.github.io/rTwig/articles/Twigs.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load Packages","title":"Twigs","text":"first step load rTwig package.","code":"library(rTwig) #> Warning in rgl.init(initValue, onlyNULL): RGL: unable to open X11 display #> Warning: 'rgl.init' failed, running with 'rgl.useNULL = TRUE'.  # Useful packages library(dplyr) library(ggplot2)"},{"path":"https://aidanmorales.github.io/rTwig/articles/Twigs.html","id":"twig-database","dir":"Articles","previous_headings":"","what":"Twig Database","title":"Twigs","text":"twig database built directly rTwig can called follows: database broken 7 different columns. scientific.name specific epithet. Genus spp. average species genus. radius.mm twig radius millimeters. species, n number unique twig samples taken, min minimum twig radius, max max twig radius, std standard deviation, cv coefficient variation. Let’s see breakdown species.","code":"# If the rTwig library has been loaded twigs # If rTwig hasn't been loaded, but just the twigs are needed rTwig::twigs #> # A tibble: 96 × 7 #>    scientific.name  radius.mm     n   min   max   std    cv #>    <chr>                <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 Abies concolor        1.43    21  0.89  1.9   0.28  0.19 #>  2 Abies spp.            1.43    21  0.89  1.9   0.28  0.19 #>  3 Acer platanoides      1.39    30  0.89  2.03  0.3   0.21 #>  4 Acer rubrum           1.18    30  0.89  1.52  0.16  0.14 #>  5 Acer saccharinum      1.41    14  0.89  1.9   0.27  0.2  #>  6 Acer saccharum        1.2     30  0.89  1.65  0.23  0.19 #>  7 Acer spp.             1.29   104  0.89  2.03  0.23  0.18 #>  8 Aesculus flava        2.67     8  2.29  2.79  0.2   0.08 #>  9 Aesculus spp.         2.67     8  2.29  2.79  0.2   0.08 #> 10 Betula nigra          0.85    30  0.51  1.52  0.23  0.27 #> # ℹ 86 more rows unique(twigs$scientific.name) #>  [1] \"Abies concolor\"               \"Abies spp.\"                   #>  [3] \"Acer platanoides\"             \"Acer rubrum\"                  #>  [5] \"Acer saccharinum\"             \"Acer saccharum\"               #>  [7] \"Acer spp.\"                    \"Aesculus flava\"               #>  [9] \"Aesculus spp.\"                \"Betula nigra\"                 #> [11] \"Betula spp.\"                  \"Carya cordiformis\"            #> [13] \"Carya ovata\"                  \"Carya spp.\"                   #> [15] \"Cercis canadensis\"            \"Cercis spp.\"                  #> [17] \"Cladrastis kentukea\"          \"Cladrastis spp.\"              #> [19] \"Cornus mas\"                   \"Cornus officinalis\"           #> [21] \"Cornus spp.\"                  \"Crataegus spp.\"               #> [23] \"Fagus grandifolia\"            \"Fagus spp.\"                   #> [25] \"Fagus sylvatica\"              \"Fraxinus americana\"           #> [27] \"Fraxinus pennsylvanica\"       \"Fraxinus quadrangulata\"       #> [29] \"Fraxinus spp.\"                \"Gleditsia spp.\"               #> [31] \"Gleditsia triacanthos\"        \"Gymnocladus dioicus\"          #> [33] \"Gymnocladus spp.\"             \"Gymnopodium floribundum\"      #> [35] \"Gymnopodium spp.\"             \"Juglans cinerea\"              #> [37] \"Juglans nigra\"                \"Juglans spp.\"                 #> [39] \"Laguncularia racemosa\"        \"Laguncularia spp.\"            #> [41] \"Larix laricina\"               \"Larix spp.\"                   #> [43] \"Liriodendron spp.\"            \"Liriodendron tulipifera\"      #> [45] \"Magnolia acuminata\"           \"Magnolia spp.\"                #> [47] \"Malus spp.\"                   \"Metasequoia glyptostroboides\" #> [49] \"Metasequoia spp.\"             \"Nyssa spp.\"                   #> [51] \"Nyssa sylvatica\"              \"Ostrya spp.\"                  #> [53] \"Ostrya virginiana\"            \"Phellodendron amurense\"       #> [55] \"Phellodendron spp.\"           \"Picea abies\"                  #> [57] \"Picea omorika\"                \"Picea pungens\"                #> [59] \"Picea spp.\"                   \"Pinus nigra\"                  #> [61] \"Pinus spp.\"                   \"Pinus strobus\"                #> [63] \"Platanus acerifolia\"          \"Platanus occidentalis\"        #> [65] \"Platanus spp.\"                \"Populus deltoides\"            #> [67] \"Populus spp.\"                 \"Prunus serotina\"              #> [69] \"Prunus spp.\"                  \"Prunus virginiana\"            #> [71] \"Quercus acutissima\"           \"Quercus alba\"                 #> [73] \"Quercus bicolor\"              \"Quercus coccinea\"             #> [75] \"Quercus ellipsoidalis\"        \"Quercus imbricaria\"           #> [77] \"Quercus macrocarpa\"           \"Quercus michauxii\"            #> [79] \"Quercus muehlenbergii\"        \"Quercus palustris\"            #> [81] \"Quercus robur\"                \"Quercus rubra\"                #> [83] \"Quercus spp.\"                 \"Quercus velutina\"             #> [85] \"Rhizophora mangle\"            \"Rhizophora spp.\"              #> [87] \"Thuja occidentalis\"           \"Thuja spp.\"                   #> [89] \"Tilia americana\"              \"Tilia spp.\"                   #> [91] \"Tilia tomentosa\"              \"Tsuga canadensis\"             #> [93] \"Tsuga spp.\"                   \"Ulmus americana\"              #> [95] \"Ulmus rubra\"                  \"Ulmus spp.\""},{"path":"https://aidanmorales.github.io/rTwig/articles/Twigs.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Twigs","text":"Let’s visualize twig data!","code":"# Lets look at a subset of oak species twigs %>%   filter(grepl(\"Quercus\", scientific.name)) %>%   ggplot(aes(x = scientific.name, y = radius.mm, color = scientific.name)) +   geom_point(aes(size = n)) +   geom_errorbar(aes(ymax = max, ymin = min)) +   coord_flip() +   labs(     title = \"Quercus Twig Radii\",     x = \"\",     y = \"Twig Radius (mm)\",     color = \"Species\",     size = \"Sample Size\"   ) +   scale_x_discrete(limits = rev) +   theme_classic()"},{"path":"https://aidanmorales.github.io/rTwig/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aidan Morales. Author, maintainer. David MacFarlane. Author.","code":""},{"path":"https://aidanmorales.github.io/rTwig/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morales , MacFarlane D (2024). rTwig: Real Twig. R package version 1.0.0, https://aidanmorales.github.io/rTwig/.","code":"@Manual{,   title = {rTwig: Real Twig},   author = {Aidan Morales and David MacFarlane},   year = {2024},   note = {R package version 1.0.0},   url = {https://aidanmorales.github.io/rTwig/}, }"},{"path":[]},{"path":"https://aidanmorales.github.io/rTwig/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Real Twig","text":"official repository rTwig package. Real Twig method corrects poorly modeled cylinders QSMs, especially overestimated small branch twig cylinders. Real Twig different traditional allometric statistical corrections. Real Twig uses real twig diameter measurements corresponding tree species inform individual branch taper models. Real Twig dynamically identifies correct cylinders QSM, using network analysis, general additive models, real twig measurements, model correct poorly fit cylinders high degree precision accuracy vetted ground truth reference data. Real Twig much correct QSM cylinder radii. Real Twig includes tools QSM visualization analysis seamlessly compatible base R popular packages Tidyverse. Real Twig also includes fast, vectorized functions point cloud fractal analysis visualization using box-dimension metric. Also included novel database twig diameter measurements many common North American European trees, species genus level.","code":""},{"path":"https://aidanmorales.github.io/rTwig/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Real Twig","text":"can install released version rTwig CRAN : can install development version rTwig GitHub :","code":"install.packages(\"rTwig\") # placeholder for CRAN release. # install.packages(\"devtools\") devtools::install_github(\"aidanmorales/rTwig\")"},{"path":"https://aidanmorales.github.io/rTwig/index.html","id":"quick-start-qsm-radii-correction","dir":"","previous_headings":"Installation","what":"Quick Start: QSM Radii Correction","title":"Real Twig","text":"QSM radii corrections run chain function build one another. general processing chain follows: Import QSM: TreeQSM SimpleForest currently supported. Update cylinder data allow network analysis growth length calculations. Correct small branch twig cylinders using real twig diameter measurements. Summarize visualize results. examples quickly run Real Twig TreeQSM SimpleForest QSMs, using example data package. See vignettes details general workflow best practices.","code":""},{"path":"https://aidanmorales.github.io/rTwig/index.html","id":"treeqsm","dir":"","previous_headings":"Installation > Quick Start: QSM Radii Correction","what":"TreeQSM","title":"Real Twig","text":"","code":"# Load the Real Twig library  library(rTwig)    # Import a TreeQSM  file <- system.file(\"extdata/QSM.mat\", package = \"rTwig\")  qsm <- import_qsm(file)    # Correct the cylinders  qsm$cylinder <- update_cylinders(qsm$cylinder)  qsm$cylinder <- correct_radii(qsm$cylinder, twigRad = 4.23)    # Plot the result  plot_qsm(qsm$cylinder)"},{"path":"https://aidanmorales.github.io/rTwig/index.html","id":"simpleforest","dir":"","previous_headings":"Installation > Quick Start: QSM Radii Correction","what":"SimpleForest","title":"Real Twig","text":"","code":"library(rTwig)    # Import a SimpleForest QSM   file <- system.file(\"extdata/QSM.csv\", package = \"rTwig\")  qsm <- read.csv(file)    # Correct the cylinders  qsm <- update_cylinders(qsm)  qsm <- correct_radii(qsm, twigRad = 4.23)    # Plot the result  plot_qsm(qsm)"},{"path":"https://aidanmorales.github.io/rTwig/index.html","id":"quick-start-box-dimension","dir":"","previous_headings":"Installation","what":"Quick Start: Box Dimension","title":"Real Twig","text":"example quickly calculate box-dimension point cloud using example data package. See vignette details explanation.","code":"# Load a point cloud file <- system.file(\"extdata/cloud.txt\", package = \"rTwig\") cloud <- read.table(file)  # Calculate box-dimension output <- box_dimension(cloud) output[[2]]$slope"},{"path":"https://aidanmorales.github.io/rTwig/reference/box_dimension.html","id":null,"dir":"Reference","previous_headings":"","what":"Box Dimension — box_dimension","title":"Box Dimension — box_dimension","text":"R port Dominik Seidel's fractal analysis \"box-dimension\" metric.","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/box_dimension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box Dimension — box_dimension","text":"","code":"box_dimension(   cloud,   x = 1,   y = 2,   z = 3,   lowercutoff = 0.01,   rm_int_box = FALSE,   plot = FALSE )"},{"path":"https://aidanmorales.github.io/rTwig/reference/box_dimension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box Dimension — box_dimension","text":"cloud point cloud object x column name position x coordinates. Defaults first column. y column name position y coordinates. Defaults second column. z column name position x coordinates. Defaults third column. lowercutoff smallest box size determined point spacing cloud meters. Defaults 1 cm. rm_int_box Remove initial box TRUE FALSE. Defaults FALSE. plot Plot results. user can specify \"2D\", \"3D\", \"\" plots. FALSE disables plotting. Defaults FALSE.","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/box_dimension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Box Dimension — box_dimension","text":"Returns list","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/box_dimension.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Box Dimension — box_dimension","text":"Arseniou G, MacFarlane DW, Seidel D (2021). “Measuring Contribution Leaves Structural Complexity Urban Tree Crowns Terrestrial Laser Scanning.” Remote Sensing, 13(14). doi:10.3390/rs13142773 .Mandelbrot BB (1983). fractal geometry nature. Freeman.Saarinen N, Calders K, Kankare V, Yrttimaa T, Junttila S, Luoma V, Huuskonen S, Hynynen J, Verbeeck H (2021). “Understanding 3D structural complexity individual Scots pine trees different management history.” Ecology Evolution, 11(6), 2561-2572. doi:10.1002/ece3.7216 .Seidel D (2018). “holistic approach determine tree structural complexity based laser scanning data fractal analysis.” Ecology Evolution, 8(1), 128-134. doi:10.1002/ece3.3661 .Seidel D, Annighöfer P, Stiers M, Zemp CD, Burkardt K, Ehbrecht M, Willim K, Kreft H, Hölscher D, Ammer C (2019). “measure tree structural complexity relates architectural benefit--cost ratio, light availability, growth trees.” Ecology Evolution, 9(12), 7134-7142. doi:10.1002/ece3.5281 .","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/box_dimension.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Box Dimension — box_dimension","text":"","code":"if (FALSE) { ## Calculate Box Dimension file <- system.file(\"extdata/cloud.txt\", package = \"rTwig\") cloud <- read.table(file, header = FALSE) output <- box_dimension(cloud, plot = \"ALL\") output }"},{"path":"https://aidanmorales.github.io/rTwig/reference/correct_radii.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct Radii — correct_radii","title":"Correct Radii — correct_radii","text":"Corrects cylinder radii","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/correct_radii.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct Radii — correct_radii","text":"","code":"correct_radii(cylinder, twigRad, backend = \"multisession\")"},{"path":"https://aidanmorales.github.io/rTwig/reference/correct_radii.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct Radii — correct_radii","text":"cylinder QSM cylinder data frame twigRad Twig radius millimeters backend Parallel backend multi-core processing. Defaults \"multisession\" (platforms), can set \"multicore\" (MacOS & Linux), \"cluster\" (platforms), \"package::backend\" string.","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/correct_radii.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct Radii — correct_radii","text":"Returns data frame","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/correct_radii.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correct Radii — correct_radii","text":"","code":"if (FALSE) { ## TreeQSM Processing Chain file <- system.file(\"extdata/QSM.mat\", package = \"rTwig\") qsm <- import_qsm(file) cylinder <- qsm$cylinder cylinder <- update_cylinders(cylinder) cylinder <- correct_radii(cylinder, twigRad = 4.23) str(cylinder)  ## SimpleForest Processing Chain file <- system.file(\"extdata/QSM.csv\", package = \"rTwig\") cylinder <- read.csv(file) cylinder <- update_cylinders(cylinder) cylinder <- correct_radii(cylinder, twigRad = 4.23) str(cylinder) }"},{"path":"https://aidanmorales.github.io/rTwig/reference/export_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Export MAT — export_mat","title":"Export MAT — export_mat","text":"Exports cylinder data visualized TreeQSM's plot_cylinder_model() function","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/export_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export MAT — export_mat","text":"","code":"export_mat(cylinder, filename)"},{"path":"https://aidanmorales.github.io/rTwig/reference/export_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export MAT — export_mat","text":"cylinder QSM cylinder data frame filename Desired name file","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/export_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export MAT — export_mat","text":"Returns .mat file","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/export_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export MAT — export_mat","text":"","code":"if (FALSE) { ## TreeQSM Processing Chain qsm <- import_qsm(\"foo.mat\") cylinder <- qsm$cylinder cylinder <- update_cylinders(cylinder) cylinder <- correct_radii(cylinder, twigRad = 4.23) export_mat(cylinder, \"foo_corrected.mat\")  ## SimpleForest Processing Chain cylinder <- read.csv(\"foo.csv\") cylinder <- update_cylinders(cylinder) cylinder <- correct_radii(cylinder, twigRad = 4.23) export_mat(cylinder, \"foo_corrected.mat\") }"},{"path":"https://aidanmorales.github.io/rTwig/reference/export_mesh.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Mesh — export_mesh","title":"Export Mesh — export_mesh","text":"Exports QSM cylinder mesh using rgl library","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/export_mesh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Mesh — export_mesh","text":"","code":"export_mesh(   cylinder,   filename,   radius = NULL,   cyl_color = NULL,   cyl_palette = NULL,   cyl_sides = 8 )"},{"path":"https://aidanmorales.github.io/rTwig/reference/export_mesh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Mesh — export_mesh","text":"cylinder QSM cylinder data frame filename Desired name file. .ply extension automatically added. radius Vector cylinder radii. Defaults modified cylinders cylinder data frame. cyl_color Optional cylinder color parameter. Colors must single hex color, vector column hex colors length cylinder data frame. cyl_palette Optional color palette numerical data. Palettes include: viridis, inferno, plasma, magma, cividis, rainbow. cyl_sides number sides polygon cross section. Defaults 8, can increased improve visual smoothness.","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/export_mesh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Mesh — export_mesh","text":"mesh .ply file","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/export_mesh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Mesh — export_mesh","text":"","code":"if (FALSE) { ## TreeQSM Processing Chain file <- system.file(\"extdata/QSM.mat\", package = \"rTwig\") qsm <- import_qsm(file) cylinder <- qsm$cylinder cylinder <- update_cylinders(cylinder) cylinder <- correct_radii(cylinder, twigRad = 4.23)  filename <- tempfile(pattern = \"QSM_mesh\") export_mesh(cylinder, filename)  ## SimpleForest Processing Chain file <- system.file(\"extdata/QSM.csv\", package = \"rTwig\") cylinder2 <- read.csv(file) cylinder2 <- update_cylinders(cylinder2) cylinder2 <- correct_radii(cylinder2, twigRad = 4.23)  filename2 <- tempfile(pattern = \"QSM_mesh2\") export_mesh(cylinder2, filename2)  ## All Parameters  filename <- tempfile(pattern = \"QSM_mesh3\") export_mesh(   cylinder = cylinder,   filename = filename3,   radius = cylinder$UnmodRadius,   cyl_color = cylinder$GrowthLength,   cyl_palette = \"viridis\" ) }"},{"path":"https://aidanmorales.github.io/rTwig/reference/import_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Import QSM — import_qsm","title":"Import QSM — import_qsm","text":"Imports QSM created TreeQSM","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/import_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import QSM — import_qsm","text":"","code":"import_qsm(file, version = \"2.x.x\")"},{"path":"https://aidanmorales.github.io/rTwig/reference/import_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import QSM — import_qsm","text":"file .mat MATLAB file version TreeQSM version. Defaults 2.x.x. user can also specify 2.0 format.","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/import_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import QSM — import_qsm","text":"Returns list","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/import_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Import QSM — import_qsm","text":"Raumonen P, Kaasalainen M, Åkerblom M, Kaasalainen S, Kaartinen H, Vastaranta M, Holopainen M, Disney M, Lewis P (2013). “Fast Automatic Precision Tree Models Terrestrial Laser Scanner Data.” Remote Sensing, 5(2), 491--520. doi:10.3390/rs5020491 .","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/import_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import QSM — import_qsm","text":"","code":"if (FALSE) { ## Read a TreeQSM MATLAB file in the 2.3.x - 2.4.x format file <- system.file(\"extdata/QSM.mat\", package = \"rTwig\") qsm <- import_qsm(file) names(qsm)  ## Read a TreeQSM MATLAB file in the 2.0 format file <- system.file(\"extdata/QSM_2.mat\", package = \"rTwig\") qsm <- import_qsm(file, version = \"2.0\") names(qsm) }"},{"path":"https://aidanmorales.github.io/rTwig/reference/plot_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot QSM — plot_qsm","title":"Plot QSM — plot_qsm","text":"Plots QSM cylinders using rgl library","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/plot_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot QSM — plot_qsm","text":"","code":"plot_qsm(   cylinder,   radius = NULL,   cyl_color = NULL,   cyl_palette = NULL,   cyl_sides = 8,   cloud = NULL,   pt_color = NULL,   pt_size = NULL,   axes = TRUE,   hover = FALSE )"},{"path":"https://aidanmorales.github.io/rTwig/reference/plot_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot QSM — plot_qsm","text":"cylinder QSM cylinder data frame radius Vector cylinder radii. Defaults modified cylinders cylinder data frame. cyl_color Optional cylinder color parameter. Colors must single hex color, vector column hex colors length cylinder data frame. cyl_palette Optional color palette numerical data. Palettes include: viridis, inferno, plasma, magma, cividis, rainbow. cyl_sides number sides polygon cross section. Defaults 8, can increased improve visual smoothness. cloud Point cloud data frame first three columns x, y, z coordinates coordinate system QSM. pt_color Color point cloud. Defaults black. pt_size Size points number. Defaults 0.1. axes Show plot axes. Defaults TRUE. hover Show cylinder ID branch mouse hover. Defaults FALSE.","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/plot_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot QSM — plot_qsm","text":"rgl QSM plot","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/plot_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot QSM — plot_qsm","text":"","code":"if (FALSE) { ## TreeQSM Processing Chain file <- system.file(\"extdata/QSM.mat\", package = \"rTwig\") qsm <- import_qsm(file) cylinder <- qsm$cylinder cylinder <- update_cylinders(cylinder) cylinder <- correct_radii(cylinder, twigRad = 4.23) plot_qsm(cylinder)  ## SimpleForest Processing Chain file <- system.file(\"extdata/QSM.csv\", package = \"rTwig\") cylinder2 <- read.csv(file) cylinder2 <- update_cylinders(cylinder2) cylinder2 <- correct_radii(cylinder2, twigRad = 4.23) plot_qsm(cylinder2)  ## All Parameters file2 <- system.file(\"extdata/cloud.txt\", package = \"rTwig\") cloud <- read.table(file2, header = FALSE)  plot_qsm(   cylinder,   radius = cylinder$UnmodRadius,   cyl_color = cylinder$GrowthLength,   cyl_palette = \"viridis\",   cyl_sides = 100,   cloud = cloud,   pt_color = \"white\",   pt_size = 1,   axes = FALSE,   hover = TRUE ) }"},{"path":"https://aidanmorales.github.io/rTwig/reference/plot_stand.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Stand — plot_stand","title":"Plot Stand — plot_stand","text":"Plots multiple QSMs forest stand using rgl library","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/plot_stand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Stand — plot_stand","text":"","code":"plot_stand(   qsms,   radius_type = \"modified\",   qsm_colors = NULL,   cyl_sides = 8,   clouds = NULL,   pt_colors = NULL,   pt_sizes = NULL,   axes = TRUE )"},{"path":"https://aidanmorales.github.io/rTwig/reference/plot_stand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Stand — plot_stand","text":"qsms list QSM cylinder data frames. radius_type Radius type either \"modified\", \"unmodified\", \"old\". Defaults \"modified\". qsm_colors Optional qsm color parameters. Colors vector hex colors length qsms list. Defaults distinct random colors. cyl_sides number sides polygon cross section. Defaults 8, can increased improve visual smoothness. clouds list point cloud data frames first three columns x, y, z coordinates coordinate system QSMs. pt_colors vector hex colors. Defaults random color QSM. pt_sizes Size points number. Defaults 0.1. axes Show plot axes. Defaults TRUE.","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/plot_stand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Stand — plot_stand","text":"rgl QSM plot","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/plot_stand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Stand — plot_stand","text":"","code":"if (FALSE) {  # Create a list of QSM cylinder data frames qsms <- list(qsm1, qsm2, qsm3, qsm4)  # Optionally create a list of point clouds clouds <- list(cloud1, cloud2, cloud3, cloud4)  plot_stand(qsms = qsms, clouds = clouds) }"},{"path":"https://aidanmorales.github.io/rTwig/reference/qsm_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"QSM Summary — qsm_summary","title":"QSM Summary — qsm_summary","text":"Generates summaries QSM features (e.g. volume, surface area, dbh, etc.) totals branch order","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/qsm_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QSM Summary — qsm_summary","text":"","code":"qsm_summary(cylinder, radius = \"modified\", triangulation = FALSE)"},{"path":"https://aidanmorales.github.io/rTwig/reference/qsm_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QSM Summary — qsm_summary","text":"cylinder QSM cylinder data frame radius Radius type either \"modified\", \"unmodified\", \"old\". Defaults \"modified\". triangulation QSM triangulation list. Defaults FALSE.","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/qsm_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QSM Summary — qsm_summary","text":"Returns list","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/qsm_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QSM Summary — qsm_summary","text":"","code":"if (FALSE) { ## TreeQSM Processing Chain file <- system.file(\"extdata/QSM.mat\", package = \"rTwig\") qsm <- import_qsm(file) cylinder <- qsm$cylinder cylinder <- update_cylinders(cylinder) qsm_summary(cylinder)  # TreeQSM Triangulation #' file <- system.file(\"extdata/QSM.mat\", package = \"rTwig\") qsm <- import_qsm(file) cylinder <- qsm$cylinder cylinder <- update_cylinders(cylinder) triangulation <- qsm$triangulation qsm_summary(cylinder, triangulation)  ## SimpleForest Processing Chain file <- system.file(\"extdata/QSM.csv\", package = \"rTwig\") cylinder <- read.csv(file) cylinder <- update_cylinders(cylinder) qsm_summary(cylinder) }"},{"path":"https://aidanmorales.github.io/rTwig/reference/smooth_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth QSM — smooth_qsm","title":"Smooth QSM — smooth_qsm","text":"Visual smoothing QSM ensuring midpoints cylinders connected","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/smooth_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth QSM — smooth_qsm","text":"","code":"smooth_qsm(cylinder)"},{"path":"https://aidanmorales.github.io/rTwig/reference/smooth_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth QSM — smooth_qsm","text":"cylinder QSM cylinder data frame","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/smooth_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth QSM — smooth_qsm","text":"Returns data frame","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/smooth_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth QSM — smooth_qsm","text":"","code":"if (FALSE) { ## TreeQSM Smoothing file <- system.file(\"extdata/QSM.mat\", package = \"rTwig\") qsm <- import_qsm(file) cylinder <- qsm$cylinder cylinder <- update_cylinders(cylinder) cylinder <- correct_radii(cylinder, twigRad = 1.5)  ## Before Smoothing plot_qsm(cylinder)  ## After Smoothing cylinder <- smooth_qsm(cylinder) plot_qsm(cylinder) }"},{"path":"https://aidanmorales.github.io/rTwig/reference/twigs.html","id":null,"dir":"Reference","previous_headings":"","what":"Twig Database — twigs","title":"Twig Database — twigs","text":"Database twig radii common North American tree species","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/twigs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Twig Database — twigs","text":"","code":"twigs"},{"path":[]},{"path":"https://aidanmorales.github.io/rTwig/reference/twigs.html","id":"twigs","dir":"Reference","previous_headings":"","what":"twigs","title":"Twig Database — twigs","text":"data frame containing twig radii measurements scientific.name tree's genus species radius.mm average twig radius millimeters n twig measurement sample size min minimum twig radii samples max maximum twig radii samples std standard deviation twig radii cv coefficient variation twig radii","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/update_cylinders.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Cylinders — update_cylinders","title":"Update Cylinders — update_cylinders","text":"Updates QSM cylinder data preparation radii correction","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/update_cylinders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Cylinders — update_cylinders","text":"","code":"update_cylinders(cylinder)"},{"path":"https://aidanmorales.github.io/rTwig/reference/update_cylinders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Cylinders — update_cylinders","text":"cylinder QSM cylinder data frame","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/update_cylinders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Cylinders — update_cylinders","text":"Returns data frame","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/update_cylinders.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update Cylinders — update_cylinders","text":"Updates parent-child branch cylinder relationships fill gaps. Three additional useful QSM metrics developed Jan Hackenberg also calculated. Growth length length parent cylinder, plus lengths child cylinders. segment portion branch two branching nodes. reverse branch order assigns twigs order 1 works backwards branching junction base stem, largest reverse branch order.","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/update_cylinders.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Update Cylinders — update_cylinders","text":"Hackenberg J, Spiecker H, Calders K, Disney M, Raumonen P (2015). “SimpleTree —Efficient Open Source Tool Build Tree Models TLS Clouds.” Forests, 6(11), 4245--4294. doi:10.3390/f6114245 .Hackenberg J, Bontemps J (2023). “Improving quantitative structure models filters based allometric scaling theory.” Applied Geomatics, 15. doi:10.1007/s12518-023-00537-4 .","code":""},{"path":"https://aidanmorales.github.io/rTwig/reference/update_cylinders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Cylinders — update_cylinders","text":"","code":"if (FALSE) { ## TreeQSM Processing Chain file <- system.file(\"extdata/QSM.mat\", package = \"rTwig\") qsm <- import_qsm(file) cylinder <- qsm$cylinder cylinder <- update_cylinders(cylinder) str(cylinder)  ## SimpleForest Processing Chain file <- system.file(\"extdata/QSM.csv\", package = \"rTwig\") cylinder <- read.csv(file) cylinder <- update_cylinders(cylinder) str(cylinder) }"},{"path":"https://aidanmorales.github.io/rTwig/news/index.html","id":"rtwig-100","dir":"Changelog","previous_headings":"","what":"rTwig 1.0.0","title":"rTwig 1.0.0","text":"Initial release Real Twig!","code":""}]
